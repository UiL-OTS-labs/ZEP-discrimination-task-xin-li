/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Implementation of task: Same-Different Auditory Discrimination (AX)
See readme.txt for more information.


Global structure of this experiment phase:

  - instructions

  - practice part
      trial

  - pause

  - test part
      trial


HISTORY:
2012-01-30 TV   Created.

\******************************************************************************/

requires 1.12;

Block task_practice
{
    on_event:entry()
    {
        control.button_box.open();
    }


    Part instructions
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(
                "<b>Dear participant,</b>\n"
                "\n"
                "Thank you for participating in this experiment.\n"
                "\n"
                "You are now going to hear word fragments over the headphones. "
                "The word fragments come in pairs. Your task is to indicate "
                "for each pair as quickly as possible whether you think the "
                "two fragments are <i>the same</i> or <i>different</i>.\n"
                "\n"

                "To respond, hit the left button on the button-box for "
                "<i>Same</i> and the right button for <i>Different</i>.\n"

//                "To respond, hit the left shift key for <i>Same</i> and the "
//                "right shift key for <i>Different</i>.\n"

//                "To respond, hit the left button on the button-box for "
//                "<i>Same</i> and the right button for <i>Different</i>. "
//                "Alternatively you can use the left or right shift keys.\n"

                "\n"
                "First we will do a short practice.\n"
                "\n"
//                "<i>Hit Enter when ready to start.</i>", 
                "<i>Hit any button on the button-box when ready to start.</i>", 
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Block practice
    {
        TestItem        item;   // current item
        TestItem[..]    missed_items;

        on_event:entry()
        {
            setup();
        }

        void setup()
        {  
            num_cycles = prac_items.size;

            // Prepare test page: progress bar, feedback and prompt enabled.
            test_page.setup(num_cycles, true, true);
        }

        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            bool reset = false;

            on_event:entry()
            {
                if(reset)
                {
                    practice.cycle = 0;
                    practice.setup();
                    reset = false;
                }

                item = prac_items[practice.cycle];

                test_page.action(this, item, reference_time, practice.cycle);
            }

            on_event:exit()
            {
                if(missed_current_item())
                {
                    prac_items.size = prac_items.size+1;
                    prac_items[prac_items.size-1] = item;
                    practice.setup();
                }
            }

            bool missed_current_item()
            {
                return test_page.response.correctness == 0;
            }
        }
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(
                "End of the practice part.\n"
                "\n"
                "If you have any questions at this moment please ask the "
                "experimenter now.\n"
                "\n"
//                "<i>Hit Enter when ready to proceed.</i>", 
                "<i>Hit any button on the button-box when ready to "
                "proceed.</i>", 
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task_practice.enter(caller);
}
