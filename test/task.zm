/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Implementation of task: Same-Different Auditory Discrimination (AX)
See readme.txt for more information.


Global structure of this experiment phase:

  - instructions

  - practice part
      trial

  - pause

  - test part
      trial


HISTORY:
2012-01-30 TV   Created.

\******************************************************************************/

//requires 1.12;

import defs;
import stimuli;
import shuffle;
import output;
import test_page;


Block task
{
    on_event:entry()
    {
        control.button_box.open();

        // If necessary set parallel port line D0 to power button box device.
//        control.button_box.output(0x02);
    }


    Part instructions
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(
                "<b>Dear participant,</b>\n"
                "\n"
                "Thank you for participating in this experiment.\n"
                "\n"
                "You are now going to hear word fragments over the headphones. "
                "The word fragments come in pairs. Your task is to indicate "
                "for each pair as quickly as possible whether you think the "
                "two fragments are <i>the same</i> or <i>different</i>.\n"
                "\n"

                "To respond, hit the left button on the button-box for "
                "<i>Same</i> and the right button for <i>Different</i>.\n"

//                "To respond, hit the left shift key for <i>Same</i> and the "
//                "right shift key for <i>Different</i>.\n"

//                "To respond, hit the left button on the button-box for "
//                "<i>Same</i> and the right button for <i>Different</i>. "
//                "Alternatively you can use the left or right shift keys.\n"

                "\n"
                "First we will do a short practice.\n"
                "\n"
//                "<i>Hit Enter when ready to start.</i>", 
                "<i>Hit any button on the button-box when ready to start.</i>", 
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Block practice
    {
        TestItem        item;   // current item
        TestItem[..]    missed_items;

        on_event:entry()
        {
            setup();
        }

        void setup()
        {  
            num_cycles = prac_items.size;

            // Prepare test page: progress bar, feedback and prompt enabled.
            test_page.setup(num_cycles, true, true);
        }

        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            bool reset = false;

            on_event:entry()
            {
                if(reset)
                {
                    practice.cycle = 0;
                    practice.setup();
                    reset = false;
                }

                item = prac_items[practice.cycle];

                test_page.action(this, item, reference_time, practice.cycle);
            }

            on_event:exit()
            {
                if(missed_current_item())
                {
                    prac_items.size = prac_items.size+1;
                    prac_items[prac_items.size-1] = item;
                    practice.setup();
                }


                //    mark_item_as_missed();

                //if(end_of_practice() && have_missing_items()) // at the end of the practice round...
                  //  redo_missed_items();
            }

            void mark_item_as_missed()
            {
                missed_items.size = missed_items.size + 1;
                missed_items[missed_items.size - 1] = item;
                println("Missed: " + item.id);
            }

            void redo_missed_items()
            {
                prac_items.size = 0;

                // Cannot easily(?) reference arrays in ZEP, so do a deep copy.
                int index = 0; 
                while(index < missed_items.size)
                {
                    prac_items.size = prac_items.size+1;
                    prac_items[index] = missed_items[index];
                    index++;
                }
        
                missed_items.size = 0;
                trial.reset = true;
                practice.num_cycles = practice.num_cycles+1; //Make sure you are not stoped at the end!
            }

            bool missed_current_item()
            {
                return test_page.response.correctness == 0;
            }

            bool end_of_practice()
            {
                return practice.cycle == practice.num_cycles-1;
            }

            bool have_missing_items()
            {
                return missed_items.size > 0;
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(
                "End of the practice part.\n"
                "\n"
                "If you have any questions at this moment please ask the "
                "experimenter now.\n"
                "\n"
//                "<i>Hit Enter when ready to proceed.</i>", 
                "<i>Hit any button on the button-box when ready to "
                "proceed.</i>", 
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Block test
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            // Randomize test items table.
            if (shuffle_test_items() != OK) terminate;

            num_cycles = test_items.size;
//            num_cycles = 3;

            // Prepare test page: progress bar enabled, feedback and prompt 
            // disabled.
            test_page.setup(num_cycles, false, false);
        }


        on_event:exit()
        {
            test_page.cleanup();

            // Save test output table as CSV file.
            test_output_save();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[test.cycle];

                test_page.action(this, item, reference_time, test.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.trialnum = test.cycle + 1;
                output.id = item.id;
                output.sndfn1 = item.sndfn1;
                output.sndfn2 = item.sndfn2;
                output.value = test_page.response.value;
                output.rt = test_page.response.rt;

                output.handedness = expdb.participant.get_enum_field(HANDEDNESS_DESCRIPTION);
                output.language = expdb.participant.get_enum_field(LANGUAGE_DESCRIPTION);

                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
